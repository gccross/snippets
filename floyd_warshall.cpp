#include <algorithm>
#include <iostream>
#include <limits>
#include <queue>

using namespace std;

void print(int* a, int n)
{
	cout << endl;
	for (int i=0; i<n ; ++i)
	{
		for (int j=0; j<n; ++j)
			cout << *((a+i*n)+j) << '\t' ;
		cout << endl;
	}
}

int at(int* array,int cols,int i, int j)
{
	return *(array+i*cols+j);
}

void floydwarshall(int* ans, int n)
{
	for (int k=0; k<n; ++k)
		for (int i=0; i<n; ++i)
			for (int j=0; j<n; ++j)
				*(ans+i*n+j) = min(*(ans+i*n+j),*(ans+i*n+k) + *(ans+k*n+j));
}

void djikstra(int*adj, int* ans, int n)
{
	for (int i=0; i<n; ++i)
	{
		auto comp = [](pair<int,int> a,pair<int,int> b){ return a.second < b.second;};
		priority_queue<pair<int,int>,vector<pair<int,int>>,decltype(comp)> pq(comp);
		pq.push(make_pair(i,0));
		*(ans+i*n+i) = 0;
		while (!pq.empty())
		{
			pair<int,int> node = pq.top();
			pq.pop();

			for (int j=0; j<n; ++j)
			{
				if (0<at(ans,n,node.first,j) && at(ans,n,i,j) > at(ans,n,i,node.first) + at(adj,n,node.first,j))
				{
					*(ans+i*n+j) = at(ans,n,i,node.first) + at(adj,n,node.first,j);
					pq.push(make_pair(j,*(ans+i*n+j)));
				}
			}
		}
	}
}
int main (int argc, char const * argv[])
{
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		cin >> n;
		int adj[n][n];
		for (int i=0; i<n; ++i)
		{
			for (int j=0; j<n; ++j)
			{
				cin >> adj[i][j];
			}
		}


		int ans[n*n];
		fill(ans,ans+n*n, INT_MAX);

		chrono::time_point<chrono::system_clock> t = chrono::system_clock::now();
		djikstra((int*)adj, (int*)ans,n);
		cout << "djikstra: " << (chrono::system_clock::now() - t).count() << " milliseconds" << endl; 	
		print((int*)ans,n);

		copy((int*)adj,(int*)adj+n*n, (int*)ans);
		chrono::time_point<chrono::system_clock> t1 = chrono::system_clock::now();
		floydwarshall((int*)ans,n);
		cout << "floyd-warshall: " << (chrono::system_clock::now() - t1).count() << " milliseconds" << endl;

		print((int*)ans, n);

	}
	return 0;
}
/*
   The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph. The Graph is represented as Adjancency Matrix, and the Matrix denotes the weight of the edegs (if it exists) else INF (1e7).

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. The first line of each test case contains an integer V denoting the size of the adjacency matrix. The next V lines contain V space separated values of the matrix (graph). All input will be integer type.

Output:
For each test case output will be V*V space separated integers where the i-jth integer denote the shortest distance of ith vertex from jth vertex. For INT_MAX integers output INF.

Constraints:
1 <= T <= 20
1 <= V <= 100
1 <= graph[][] <= 500

Example:
Input
2
2
0 25
INF 0
3
0 1 43
1 0 6
INF INF 0

Output
0 25
INF 0
0 1 7
1 0 6
INF INF 0


Actually, they fixed input to be 1000000 not INF.
2
2
0 25
10000000 0
3
0 1 43
1 0 6
10000000 10000000 0

16
0 462 22 821 72 895 186 665 418 948 629 309 433 444 657 950 751 0 591 360 431 28 387 865 403 410 476 746 91 388 892 928 735 364 0 313 919 446 218 115 121 -2 425 112 669 220 567 336 180 680 937 0 903 122 327 300 -3 741 73 483 497 526 233 399 816 979 125 139 0 908 581 367 385 713 728 820 187 407 403 764 106 945 455 405 858 0 939 743 169 946 846 604 791 705 140 387 466 966 728 601 116 -2 0 192 845 393 267 583 575 465 1 988 591 117 296 408 532 164 357 0 637 343 313 493 957 467 208 459 216 684 436 954 295 914 962 850 0 769 717 127 715 654 954 726 5 556 205 311 974 99 485 342 747 0 191 17 250 510 846 821 980 72 515 778 36 173 702 360 33 481 0 439 522 206 456 487 294 471 53 861 144 389 971 -9 741 80 192 0 121 692 65 977 523 55 60 401 195 458 936 907 181 979 750 982 0 863 319 448 360 623 281 775 847 787 527 180 789 278 270 343 761 0 324 418 749 210 835 171 973 40 -9 919 309 182 260 70 527 133 0 399 337 856 384 629 -7 593 778 530 783 577 171 415 931 942 102 0

Expected Output:

0 145 22 211 72 91 93 28 143 20 211 37 158 235 94 358
134 0 151 339 206 28 159 157 197 149 340 166 91 301 160 415
3 123 0 214 75 69 71 6 121 -2 189 15 136 213 72 336
180 145 177 0 109 122 180 115 -3 175 73 124 236 279 181 399
128 242 125 139 0 194 196 131 136 123 212 140 187 338 197 461
106 251 128 311 178 0 131 134 169 126 317 143 264 273 132 387
96 179 118 172 108 -10 -8 62 159 116 245 71 192 134 -7 369
251 117 268 379 315 145 199 0 314 266 313 278 208 341 200 459
183 235 180 363 255 181 183 118 0 178 319 127 248 325 184 516
5 125 27 216 77 71 73 8 148 0 191 17 138 215 74 363
164 72 161 175 36 100 216 151 33 159 0 160 163 206 217 487
56 108 53 236 128 54 56 -9 174 51 192 0 121 198 57 389
63 55 60 274 135 83 131 66 181 58 249 75 0 273 132 396
283 297 281 445 306 313 315 180 303 278 270 295 388 0 316 418
87 170 109 163 99 -19 -17 53 150 107 236 62 183 125 -16 360
121 235 118 132 -7 83 85 124 129 116 171 133 180 227 86 0


89
0 2 10000000 10000000 10000000 424 10000000 20 10000000 454 10000000 477 22 10000000 132 296 10000000 443 10000000 10000000 10000000 289 10000000 10000000 472 347 10000000 17 10000000 353 10000000 10000000 10000000 10000000 281 10000000 201 34 37 217 155 10000000 10000000 244 142 10000000 190 10000000 10000000 10000000 401 10000000 396 10000000 10000000 10000000 10000000 10000000 417 10000000 10000000 146 28 282 10000000 10000000 10000000 10000000 15 407 10000000 82 10000000 341 10000000 416 108 10000000 10000000 10000000 24 453 10000000 446 10000000 185 475 203 10000000
28 0 299 200 114 10000000 95 10000000 10000000 296 10000000 10000000 10000000 431 10000000 10000000 10000000 10000000 404 341 9 86 10000000 258 22 10000000 10000000 10000000 53 10000000 247 10000000 79 10000000 477 405 404 10000000 192 382 10000000 21 436 126 10000000 301 129 10000000 223 10000000 34 113 304 10000000 10000000 10000000 464 111 216 153 10000000 10000000 10000000 10000000 167 134 10000000 303 238 10000.................

Expected Output:
0 2 26 64 43 36 44 20 45 57 63 60 22 46 27 37 44 37 43 49 11 50 57 32 24 48 31 17 55 59 49 38 57 85 59 38 65 34 37 102 33 23 43 39 39 40 62 59 20 54 36 45 34 66 48 24 48 36 29 80 48 76 28 38 35 18 61 32 15 66 29 46 47 41 40 33 51 29 24 23 24 40 55 67 40 61 46 31 51
28 0 35 62 71 34 50 48 54 66 76 63 50 55 36 46 42 52 54 53 9 59 68 30 22 52 59 26 53 87 47 36 66 101 64 64 68 62 48 110 42 21 41 50 54 44 60 70 46 57 34 43 43 69 57 33 68 39 38 78 57 85 50 47 44 27 70 41 41 64 33 55 52 46 58 31 79 49 33 26 52 54 53 65 51 70 44 29 54
42 44 0 67 70 41 34 62 32 44 51 56 64 33 1 47 55 17 52 63 24 56 72 31 23 33 27 27 78 55 62 40 52 89 39 57 61 48 53 106 7 43 42 39 19 45 72 40 39 33 34 37 44 53 22 34 33 48 3 59 58 86 51 12 45 28 48 6 34 59 34 52 57 21 30 32 67 14 34 42 44 20 54 77 56 60 39 51 30
41 43 23 0 78 56 28 55 33 29 53 54 43 34 24 29 62 31 26 25 39 22 59 21 13 10 50 17 65 65 43 25 57 89 53 53 37 59 41 77 30 35 19 26 33 35 44 63 35 48 33 54 31 54 45 24 55 38 26 29 45 76 41 35 7 15 49 29 30.................

Split it up:

0	462	22	821	72	895	186	665	418	948	629	309	433	444	657	950
751	0	591	360	431	28	387	865	403	410	476	746	91	388	892	928
735	364	0	313	919	446	218	115	121	-2	425	112	669	220	567	336
180	680	937	0	903	122	327	300	-3	741	73	483	497	526	233	399
816	979	125	139	0	908	581	367	385	713	728	820	187	407	403	764
106	945	455	405	858	0	939	743	169	946	846	604	791	705	140	387
466	966	728	601	116	-2	0	192	845	393	267	583	575	465	1	988
591	117	296	408	532	164	357	0	637	343	313	493	957	467	208	459
216	684	436	954	295	914	962	850	0	769	717	127	715	654	954	726
5	556	205	311	974	99	485	342	747	0	191	17	250	510	846	821
980	72	515	778	36	173	702	360	33	481	0	439	522	206	456	487
294	471	53	861	144	389	971	-9	741	80	192	0	121	692	65	977
523	55	60	401	195	458	936	907	181	979	750	982	0	863	319	448
360	623	281	775	847	787	527	180	789	278	270	343	761	0	324	418
749	210	835	171	973	40	-9	919	309	182	260	70	527	133	0	399
337	856	384	629	-7	593	778	530	783	577	171	415	931	942	102	0


0	462	22	821	
751	0	591	360	
735	364	0	313	
180	680	937	0	

0	462	22	821	72	
751	0	591	360	431	
735	364	0	313	919	
180	680	937	0	903	
816	979	125	139	0	

0	462	22	821	72	895	
751	0	591	360	431	28	
735	364	0	313	919	446	
180	680	937	0	903	122	
816	979	125	139	0	908	
106	945	455	405	858	0	

0	462	22	821	72	895	186	
751	0	591	360	431	28	387	
735	364	0	313	919	446	218	
180	680	937	0	903	122	327	
816	979	125	139	0	908	581	
106	945	455	405	858	0	939	
466	966	728	601	116	-2	0	

0	462	22	821	72	895	186	665	418	
751	0	591	360	431	28	387	865	403	
735	364	0	313	919	446	218	115	121	
180	680	937	0	903	122	327	300	-3	
816	979	125	139	0	908	581	367	385	
106	945	455	405	858	0	939	743	169	
466	966	728	601	116	-2	0	192	845	
591	117	296	408	532	164	357	0	637	
216	684	436	954	295	914	962	850	0	

0	462	22	821	72	895	186	665	418	948	629		
751	0	591	360	431	28	387	865	403	410	476		
735	364	0	313	919	446	218	115	121	-2	425		
180	680	937	0	903	122	327	300	-3	741	73		
816	979	125	139	0	908	581	367	385	713	728		
106	945	455	405	858	0	939	743	169	946	846		
466	966	728	601	116	-2	0	192	845	393	267		
591	117	296	408	532	164	357	0	637	343	313		
216	684	436	954	295	914	962	850	0	769	717		
5	556	205	311	974	99	485	342	747	0	191	 
980	72	515	778	36	173	702	360	33	481	0		

*/
